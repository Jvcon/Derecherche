{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"网盘工具箱","options":{"awareOfChrome":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://fenxiang.qq.com/*","http://lixian.qq.com/*","http://dl.vmall.com/*","http://dl.dbank.com/*","http://kuai.xunlei.com/*","http://pan.baidu.com/share/*","https://pan.baidu.com/share/*","http://pan.baidu.com/wap/*","https://pan.baidu.com/wap/*","http://yun.baidu.com/share/*","https://yun.baidu.com/share/*","http://yun.baidu.com/s/*","https://yun.baidu.com/s/*","http://pan.baidu.com/disk/home*","https://pan.baidu.com/disk/home*","http://pan.baidu.com/s/*","https://pan.baidu.com/s/*","http://pan.baidu.com/play/*","https://pan.baidu.com/play/*","http://*.yunpan.cn/*","http://*.yunpan.360.cn/*"],"orig_matches":["http://fenxiang.qq.com/*","http://lixian.qq.com/*","http://dl.vmall.com/*","http://dl.dbank.com/*","http://kuai.xunlei.com/*","http://pan.baidu.com/share/*","https://pan.baidu.com/share/*","http://pan.baidu.com/wap/*","https://pan.baidu.com/wap/*","http://yun.baidu.com/share/*","https://yun.baidu.com/share/*","http://yun.baidu.com/s/*","https://yun.baidu.com/s/*","http://pan.baidu.com/disk/home*","https://pan.baidu.com/disk/home*","http://pan.baidu.com/s/*","https://pan.baidu.com/s/*","http://pan.baidu.com/play/*","https://pan.baidu.com/play/*","http://*.yunpan.cn/*","http://*.yunpan.360.cn/*"],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":1,"file_url":"https://userscripts.org/scripts/source/159911.user.js","source":""},{"name":"Search Jump Around","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*","https://www.google.*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":2,"file_url":"http://userscripts.org/scripts/source/61372.user.js","source":""},{"name":"google search redirection remover","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*://www.google.com/","*://www.google.com/webhp*","*://www.google.com/*&q=*","*://www.google.com/*?q=*","*://www.google.com.hk/*&q=*","*://www.google.com.hk/*?q=*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":3,"file_url":"http://userscripts.org/scripts/source/82547.user.js","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIGdvb2dsZSBzZWFyY2ggcmVkaXJlY3Rpb24gcmVtb3ZlciAKLy8gQG5hbWVzcGFjZSAgICAgIGh0dHA6Ly93d3cuZW5qb3lmcmVld2FyZS5vcmcvCi8vIEBkZXNjcmlwdGlvbiAgICByZW1vdmUgcmVkaXJlY3Rpb24gZnJvbSBnb29nbGUgc2VhcmNoIHJlc3VsdAovLyBAaW5jbHVkZSAgICAgICAgKjovL3d3dy5nb29nbGUuY29tLwovLyBAaW5jbHVkZSAgICAgICAgKjovL3d3dy5nb29nbGUuY29tL3dlYmhwKgovLyBAaW5jbHVkZSAgICAgICAgKjovL3d3dy5nb29nbGUuY29tLyomcT0qCi8vIEBpbmNsdWRlICAgICAgICAqOi8vd3d3Lmdvb2dsZS5jb20vKj9xPSoKLy8gQGluY2x1ZGUgICAgICAgICo6Ly93d3cuZ29vZ2xlLmNvbS5oay8qJnE9KgovLyBAaW5jbHVkZSAgICAgICAgKjovL3d3dy5nb29nbGUuY29tLmhrLyo/cT0qCi8vIEBncmFudCAgICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgICAgR01fc2V0VmFsdWUKLy8gPT0vVXNlclNjcmlwdD09CgovLyA9PUFib3V0PT0KLy8gYXV0aG9yOiBjeWJlcnNjb3JwaW8KLy8gRW1haWw6IGN5YmVyc2NvcnBpb0BnbWFpbC5jb20KLy8gc2l0ZTogaHR0cDovL3d3dy5lbmpveWZyZWV3YXJlLm9yZy8KLy8KCmZ1bmN0aW9uIGNsZWFuKGNvbnRhaW5lcikgewoJdmFyIGFzID0gY29udGFpbmVyLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7Cglmb3IgKHZhciBpID0gMCwgbCA9IGFzLmxlbmd0aDsgaSA8IGw7ICsrIGkpIHsKCQl2YXIgYSA9IGFzW2ldOwoJCWlmIChhLmhhc0F0dHJpYnV0ZSgnb25tb3VzZWRvd24nKSkgewoJCQlhLnJlbW92ZUF0dHJpYnV0ZSgnb25tb3VzZWRvd24nKTsKCQl9Cgl9Owp9Cgp2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHsKCW11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG0pIHsKCQlpZiAobS50eXBlID09PSAnY2hpbGRMaXN0JyAmJiBtLmFkZGVkTm9kZXMgIT09IG51bGwpIHsKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBtLmFkZGVkTm9kZXMubGVuZ3RoOyArKyBpKSB7CgkJCQl2YXIgbiA9IG0uYWRkZWROb2Rlc1tpXTsKCQkJCWlmIChuLmlkICYmIG4uaWQgPT09ICdpcmVzJykgewoJCQkJCWNsZWFuKG4pOwoJCQkJfSBlbHNlIGlmIChuLnRhZ05hbWUgPT0gJ0EnKSB7CgkJCQkJaWYgKG4uaGFzQXR0cmlidXRlKCdvbm1vdXNlZG93bicpKSB7CgkJCQkJCW4ucmVtb3ZlQXR0cmlidXRlKCdvbm1vdXNlZG93bicpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0pOwp9KTsKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHsKCXdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgYXJndW1lbnRzLmNhbGxlZSwgZmFsc2UpOwoJb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7CgoJdmFyIGlyZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaXJlcycpOwoJaWYgKGlyZXMpIHsKCQljbGVhbihpcmVzKTsKCX0KfSwgZmFsc2UpOwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGZ1bmN0aW9uKCkgewoJd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VubG9hZCcsIGFyZ3VtZW50cy5jYWxsZWUsIGZhbHNlKTsKCW9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKfSwgZmFsc2UpOwo="},{"name":"GoogleMonkeyR","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://www.google.*/webhp?*","http://www.google.*/search?*","http://www.google.*/ig?*","http://www.google.*/","http://www.google.*/#*","https://www.google.*/webhp?*","https://www.google.*/search?*","https://www.google.*/ig?*","https://www.google.*/","https://www.google.*/#*","https://encrypted.google.*/webhp?*","https://encrypted.google.*/search?*","https://encrypted.google.*/ig?*","https://encrypted.google.*/","https://encrypted.google.*/#*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":4,"file_url":"http://userscripts.org/scripts/source/9310.user.js","source":""},{"name":"Custom Feedly Styles (+ Always Show Left Menu)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://feedly.com/*","https://feedly.com/*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":5,"file_url":"http://userscripts.org/scripts/source/171749.user.js","source":""},{"name":"Straight Google","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://www.google.com/reader/*"],"orig_includes":["*://www.google.*/*q=*","*://www.google.*/*tbs=*","*://www.google.*/search?*","*://www.google.*/webhp?*","*://www.google.*/cse?*","*://www.google.*/?*","*://www.google.*/#*","*://www.google.*/","*://encrypted.google.*","*://ipv6.google.*","*://www.google.*/news*","*://news.google.*/*","*://plus.google.com/_/scs/apps-static/_/js/*","*://images.google.com/*","*://docs.google.com/*","*://maps.google.com/*","*://www.google.com/maps*","*://ditu.google.com/*","*://www.youtube.*","*://groups.google.com/group/*","*://www.google.com/bookmarks/*","*://history.google.com/bookmarks/*","*://www.google.com/history/*","*://www.google.com/prdhp*","*://www.google.com/products/catalog?*","*://www.google.com/shopping/product/*","*://mail.google.com/*","*://www.google.com/mail*","*://play.google.com/store*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":6,"file_url":"https://userscripts.org/scripts/source/121261.user.js","source":""},{"name":"Jump to Top/Bottom of page with hotkeys","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["https://mail.google.com/*","*.google.com/reader/*","http://dzh.mop.com/*","http://www.douban.com/photos/*"],"orig_includes":["*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":7,"file_url":"http://userscripts.org/scripts/source/108242.user.js","source":""},{"name":"Crack Url Wait Code Login For Chrome","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["*://*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-start","user_agent":""},"enabled":true,"position":8,"file_url":"http://userscripts.org/scripts/source/157621.user.js","source":""},{"name":"Boxz Price History Image","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://mvd.jd.com/*.html","http://book.jd.com/*.html","http://item.jd.com/*.html","http://www.newegg.com.cn/product/*","http://www.newegg.com.cn/Product/*","http://www.amazon.cn/gp/product/*","http://www.amazon.cn/*/dp/*","http://www.amazon.cn/mn/detailApp*","http://product.dangdang.com/Product.aspx?product_id=*","http://product.dangdang.com/product.aspx?product_id=*","http://item.yixun.com/item-*","http://www.suning.com/emall/prd_10052_10051_-7_*.html*","http://www.suning.com/emall/snupgbpv_10052_10051_*_.html","http://www.suning.com/emall/sngbv_10052_10051_*_.html","http://www.gome.com.cn/ec/homeus/jump/product/*.html*","http://www.lusen.com/Product/ProductInfo.aspx?Id=*","http://www.efeihu.com/Product/*.html*","http://www.tao3c.com/product/*","http://www.coo8.com/product/*.html*","http://www.yihaodian.com/item/*","http://www.1mall.com/item/*","http://www.ouku.com/goods*","http://www.redbaby.com.cn/*/*.html*","http://cn.strawberrynet.com/a/b/c/*/","http://web1.sasa.com/SasaWeb/sch/product/viewProductDetail.jspa?itemno=*","http://www.bookschina.com/*.htm","http://www.wl.cn/*","http://product.china-pub.com/*","http://www.winxuan.com/product/*","http://www.99read.com/product/*","http://www.99read.com/Product/*","http://www.new7.com/product/*","http://detail.bookuu.com/*.html"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":9,"file_url":"http://userscripts.org/scripts/source/119362.user.js","source":""},{"name":"youku-html5-player","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["http://www.acfun.tv/"],"orig_includes":["http://*.youku.com/*","http://*.tudou.com/*","http://tv.sohu.com/*","http://*.iqiyi.com/*","http://*.letv.com/*","http://video.sina.com.cn/*","http://v.qq.com/*","http://61.147.76.6/*","http://222.141.53.5/*","http://*.56.com/*","http://*.bilibili.tv/*","http://*.acfun.tv/*"],"orig_matches":[],"orig_noframes":null,"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":"document-end","user_agent":""},"enabled":true,"position":10,"file_url":"http://userscripts.org/scripts/source/162490.user.js","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICB5b3VrdS1odG1sNS1wbGF5ZXIKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8venl0aHVtLnNpbmFhcHAuY29tL3lvdWt1aHRtbDVwbGF5ZXJib29rbWFyay8KLy8gQHZlcnNpb24gICAgICAyLjAgYmV0YQovLyBAZGVzY3JpcHRpb24gIFRoZSBQcm9ncmFtbWUgb2YgTW90aGVyIERvbid0IFdvcnJ5IEFib3V0IE15IE1hY2Jvb2sgQnVybmluZyBBbnkgTW9yZSB2Mi4wIEJldGEKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi55b3VrdS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLnR1ZG91LmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cDovL3R2LnNvaHUuY29tLyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi5pcWl5aS5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLmxldHYuY29tLyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vdmlkZW8uc2luYS5jb20uY24vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly92LnFxLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgaHR0cDovLzYxLjE0Ny43Ni42LyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vMjIyLjE0MS41My41LyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi41Ni5jb20vKgovLyBAaW5jbHVkZSAgICAgIGh0dHA6Ly8qLmJpbGliaWxpLnR2LyoKLy8gQGluY2x1ZGUgICAgICBodHRwOi8vKi5hY2Z1bi50di8qCi8vIEBleGNsdWRlICAgICAgaHR0cDovL3d3dy5hY2Z1bi50di8KLy8gQGNvcHlyaWdodCAgMjAxMi0yMDEzLCB6eXRodW0gPHp5dGh1bTAyQGdtYWlsLmNvbT4gKGh0dHA6Ly9hdGFsYXNpaS5jb20vKQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpe3ZhciBsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO2wuc2V0QXR0cmlidXRlKCdyZWwnLCdzdHlsZXNoZWV0Jyk7bC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywnYWxsJyk7bC5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCdodHRwOi8venl0aHVtLnNpbmFhcHAuY29tL3lvdWt1aHRtbDVwbGF5ZXJib29rbWFyay95b3VrdWh0bWw1cGxheWVyYm9va21hcmsyLmNzcycpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobCk7dmFyIHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtzLnNldEF0dHJpYnV0ZSgnc3JjJywnaHR0cDovL3p5dGh1bS5zaW5hYXBwLmNvbS95b3VrdWh0bWw1cGxheWVyYm9va21hcmsveW91a3VodG1sNXBsYXllcmJvb2ttYXJrMi5qcycpO2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocyk7fSkoKTs="}]}